==========================
Установка питона и пакетов
==========================

    В этой статье я попытаюсь описать процесс создания готового python окружения
и работу с пакетами на пользовательском уровне. Статья расcчитана 
на новичков (в основном для студентов, слушающих мои курсы).

<----------------------------------------------------------------------------->

Задачи обычно возникающие при установки питона и его пакетов:

* Выбор дистрибутив питона и его установка
* Выбор IDE
* Поиск и установка пакетов

Кроме этого я пробегусь по этим полезным вещам:

* [virtualenv]
* lint'ы
* ipython
* [pythonanywhere.com]

Выбор дистрибутив питона и его установка
----------------------------------------

    Если вы используете linux, то лучше использовать python идущий в пакетах -
как правило это немного измененный cpython. Для windows можно выбирать между
[стандартным] питоном и дистрибутивом от [active_python|Active State].
Последний содержит расширенную документацию и некоторые дополнительные 
библиотеки. Мы не будем рассматривать PyPy/Stackless/etc - ограничимся только 
CPython. Дальше нужно сделать выбор между двумя ветками - 3.2/3.3 и 2.7. Пока 
что с 2.7 у вас будет меньше проблем, но третья версия по поддержке уже 
подбирается достаточно близко. x86 и amd64 версии выбираем по вкусу. 
Установка и под windows и совершенно стандартна и не должна вызывать проблем.
В linux питон уже почти 100% установлен.

Выбор IDE
---------

    Динамический характер языка делает написание функциональных IDE достаточно 
сложным, а высокая компактность кода и pythonic подход заметно уменьшает в них 
необходимость. Так что не сложные проекты можно делать в продвинутых текстовых 
редакторах - [notepad++], [sublime text] (или vim/emacs). Хотя новичкам IDE 
будут оказывать заметную помошь встроенной подсказкой и каким ни каким 
статическим анализом. Из IDE я бы выделил eclipse + [pydev] и платные [PyCharm] 
и [KomodoIDE]. Также есть [Python tools for VS], которые добавляет поддержку
cpython и ironpython в VS2010/VS2012.
    
Я бы советовал выбирать между sublime text и eclipse + pydev.

Поиск и установка пакетов
-------------------------

    Пакеты/модули в python это файлы с расширениями py/pyc/pyo/(pyd или so), или 
директории с такими файлами. Также весь пакет может быть в одном архиве 
(только если пакет не содержит pyd/so файлы). По умолчанию пакеты 
устанавливаются в системную папку - PYTHON_ROOT\lib\site-packages для windows и 
/usr/local/lib/pythonXX/dist-packages для ubuntu (XX - версия питона, 
PYTHON_ROOT - корневая папка установки python, как правило С:\PythonXX)
    
    Если вы используете linux, то можно использовать пакеты из дистрибутива - 
в Ubuntu/Fedora есть практически все. Иначе искать пакеты в основном стоит на 
[pypi] или с помощью google. Пакеты могут быть в трех основных форматах: архив, 
exe/msi, egg.

    Архив нужно распаковать, в корневой папке должен быть файл setup.py. Если 
его там нет, то можно просто скопировать содержимое архива в директорию с 
пакетами. Если setup.py есть, то нужно выполнить python setup.py install. При 
этом следует использовать тот интерпретатор питона, в который вы хотите 
установить пакет. Если пакет не предоставляет модулей написанных на С/С++, то 
установка должна пройти без особенных проблем. Иначе python будет пытаться 
собрать компилируемые расширения. В linux такой процесс проходит чаще всего
безболезненно (максимум требуется установка пакетов с заголовочными файлами для
для используемых C библиотек), а вот в windows путь компиляции может быть 
достаточно трудным.

    При установке в windows проще использовать уже собранный exe/msi файл. 
Для большинства пакетов они доступны на pypi или на сайте библиотеки, также 
много бинарных пакетов можно найти на [pythonlibs]. При загрузке обратите 
внимание на архитектуру и версию python. Для установки такие пакеты нужно 
запустить. Библиотеки не содержащие компилируемого кода уставливаются без
проблем на обеих системах.

    egg это формат пакетов одного из пакетные менеджеров питона - [setuptools].
Грубо говоря это zip архив с дополнительной информацией о пакете и его 
зависимостях. Более новой и активно развиваемой альтернативой setuptools 
является [pip]. pip использует код setuptools(или distribute) и не поддерживает 
egg. Оба этих менеджера умеют находить пакеты по имени на pypi, по URL и 
локально. Поддерживаются разнообразные форматы архивов и автоматическая
установка зависимостей. pip умеет деинсталлировать пакеты и поддерживает 
установку из svn/git/mercurial.

Установка pip - http://www.pip-installer.org/en/latest/installing.html

* скачать и запустить http://python-distribute.org/distribute_setup.py
* скачать и запустить https://raw.github.com/pypa/pip/master/contrib/get-pip.py

Установка setuptools

* Скачать и запустить http://peak.telecommunity.com/dist/ez_setup.py

    Оба этих менеджера предоставляют команду easy_install, pip
кроме этого предоставляет команду pip.

Использование (примеры команд без их вывода):

shell:
    # pip install pylint # установим pylint
    # easy_install install -U pylint # обновить пакет
    # pip install --upgrade simplejson
    # pip uninstall simplejson # удалить
    # pip install http://my.package.repo/SomePackage-1.0.4.zip
    # pip install git+https://github.com/simplejson/simplejson.git
    # pip install svn+svn://svn.zope.org/repos/main/zope.interface/trunk/


virtualenv
----------

    [virtualenv] позволяет делать на одной машине несколько независимых 
инсталляций python, каждая из которых имеет свой интерпретатор, набор настроек 
и библиотек. Некоторые из таких окружений могут использовать системную папку с 
дополнительными пакетами. Кроме этого virtualenv позволяет устанавливать питон 
и пакеты пользователям без прав root.

shell:
    $ sudo pip install virtualenv # или sudo apt-get install python-virtualenv
    $ virtualenv --distribute ENV_NAME # или python virtualenv.py --distribute ENV_NAME

    --distribute заставить virtualenv установить distribute вместо setuptools.

    Эта команда создаст папку ENV_NAME внутри которой будет интерпретатор python
ENV_NAME/bin/python и каталог для пакетов ENV_NAME/lib/pythonX.X/site-packages.
ENV_NAME/bin/python будет настроен на поиск пакетов в 
ENV_NAME/lib/pythonX.X/site-packages. Также virtualenv устанавливает в новое 
окружение pip. Что-бы активировать это окружений нужно исполнить скрипт 
activate.

shell:
    $ source ENV_NAME/bin/activate
    > ENV_NAME\Scripts\activate # для windows

    Теперь команда python будет приводить к запуску питона из
ENV_NAME/bin/python, то же относится и к pip. После окончания работы нужно
выполнить deactivate. virtualenv включили в стандартную библиотеку
начиная с python3.3


lint'ы
------

    Линтами называют средства статического анализа по имени первой такой 
утилиты, которая находила странно написанные участки C кода, потенциально 
содержащие ошибки. Из-за динамического характера python сделать для него очень 
хороший линт невозможно, а даже просто хороший очень сложно. Ошибки при которых 
С программа даже не скомпилируется могут легко загнать в угол python линты. Но 
тем не менее значительную часть (а у начинающих - практически все) 
ошибок/опечаток они найдут.

    Три основных lint'а для python это [pylint], [pychecker] и [pyflakes]. Из 
них pylint, наверное, наиболее сообразительный. Кроме этого он имеет большое 
количество настроек, которые позволяют изменить особенности проверок. Также 
pylint проверяет стиль кода, используя шаблоны из конфигурационного файла и 
собирает полезную статистику. Плюс большая часть IDE и даже sublime имеют 
интеграцию с pylint.

    По умолчанию pylint слишком требовательный так что начинать его 
использование стоит с подстройки конфига под себя, кроме этого иногда он дает 
ложные срабатывания. 

    Как более легкую альтернативу можно использовать [pep8], проверяющий код на 
соответствие основному python [pep8_pep|стандарту кодирования].

ipython
-------

    Чуть подробнее о установке ipython. Под linux с правами root все 
просто (ubuntu):

shell:
    $ sudo apt-get install ipython ipython-doc ipython-notebook ipython-qtconsole python-zmq

или

shell:
    $ sudo apt-get install --install-suggests ipython

ipython готов к запуску -

shell:
    $ ipython qtconsole # GUI консоль
    $ ipython notebook  # Web интерфейс
    $ ipython # консольный интерфейс

    Под windows все не так просто - нужно загрузить все пакеты и зависимости 
вручную и установить их. pip поможет не сильно, поскольку большая часть пакетов
С расширения с внешними зависимости и собирать их будет лишней сложностью. 
Зависимости ipython (поскольку мы не будем использовать pip то их придется 
выяснять и устанавливать самостоятельно) можно определить двумя способами - 
найти в [ipython_install|документации по установке] или пытаться запускать 
ipython и смотреть на ошибки импорта. Из документации находим зависимости:

* pyqt или pyside
* pyzmq
* tornado
* pygments
* pyreadline
* distribute или setuptools
    
    Бинарные версии всех этих пакетов есть в [pythonlibs]. Загружаем и ставим 
в любом порядке. После чего выбираем из:

shell:
    > С:\Python2.7\Scripts\ipython.bat qtconsole # GUI консоль
    > С:\Python2.7\Scripts\ipython.bat notebook # Web интерфейс
    > С:\Python2.7\Scripts\ipython.bat # консольный интерфейс


[pythonanywhere.com]
--------------------

    Если поставить питон совсем никак нельзя, то можно воспользоваться web
консолью на указанном сайте. После регистрации можно бесплатно запустить 2 
python/ipython консоли в браузере и пробовать python без установки.


linklist:
    virtualenv http://pypi.python.org/pypi/virtualenv
    стандартным http://www.python.org/download/
    active_python http://www.activestate.com/activepython/downloads
    pypi http://pypi.python.org/pypi
    pythonlibs http://www.lfd.uci.edu/~gohlke/pythonlibs/
    pip http://www.pip-installer.org/en/latest/index.html
    ipython_install http://ipython.org/ipython-doc/stable/install/install.html
    pychecker http://pychecker.sourceforge.net/
    Python_tools_for_VS http://pytools.codeplex.com/
    pyflakes https://launchpad.net/pyflakes
    pep8_pep http://www.python.org/dev/peps/pep-0008/
    pylint http://pypi.python.org/pypi/pylint
    pep8 http://pypi.python.org/pypi/pep8
    PyCharm http://www.jetbrains.com/pycharm/
    pydev http://pydev.org/    
    setuptools http://pypi.python.org/pypi/setuptools 
    sublime_text http://www.sublimetext.com/
    KomodoIDE http://www.activestate.com/komodo-ide
    pythonanywhere.com http://pythonanywhere.com